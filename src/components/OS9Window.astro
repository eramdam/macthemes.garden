---
export enum WindowButtons {
  Close,
  Zoom,
  Collapse,
}
interface Props {
  classname?: string;
  title: string;
  buttons?: WindowButtons[];
  as?: keyof astroHTML.JSX.DefinedIntrinsicElements;
}

import crypto from "node:crypto";
const id = crypto
  .createHash("sha256")
  .update(JSON.stringify(Astro.props))
  .digest("base64");

const { classname, title } = Astro.props;
const buttons = Astro.props.buttons ?? [
  WindowButtons.Close,
  WindowButtons.Collapse,
  WindowButtons.Zoom,
];
const Wrapper = Astro.props.as ? Astro.props.as : "div";
---

<Wrapper id={id} class:list={["macos9-window", classname]}>
  <div class="macos9-window-titlebar">
    {
      buttons.includes(WindowButtons.Close) && (
        <button class="button close" data-action="close" />
      )
    }
    <span class="filler"></span>
    <span class="title-text">{title}</span>
    <span class="filler"></span>
    {
      buttons.includes(WindowButtons.Zoom) && (
        <button class="button zoom" data-action="zoom" />
      )
    }
    {
      buttons.includes(WindowButtons.Collapse) && (
        <button class="button collapse" data-action="collapse" />
      )
    }
  </div>
  <div class="macos9-window-body">
    <slot name="before-content" />
    <div class="macos9-window-mainbody platinum-scrollbars">
      <slot />
    </div>
    <slot name="after-content" />
  </div>
</Wrapper>

<script define:vars={{ id }}>
  const windowElement = document.getElementById(id);
  const storageKey = `macthemes-window-${id}`;
  const windowState = JSON.parse(
    localStorage.getItem(storageKey) || `{"collapsed": false,"zoomed": false}`
  );
  if (windowState.collapsed) {
    windowElement.classList.add("collapsed");
  } else if (windowState.zoomed) {
    windowElement.classList.add("zoomed");
  }

  function setWindowState(state) {
    const currentState = JSON.parse(
      localStorage.getItem(storageKey) || `{"collapsed": false,"zoomed": false}`
    );

    currentState.collapsed =
      state === "collapsed" ? !currentState.collapsed : currentState.collapsed;
    currentState.zoomed =
      state === "zoomed" ? !currentState.zoomed : currentState.zoomed;

    localStorage.setItem(storageKey, JSON.stringify(currentState));
  }

  windowElement.querySelectorAll("button").forEach((button) => {
    if (button.dataset.action === "collapse") {
      const titlebar = windowElement.querySelector(".macos9-window-titlebar");
      if (titlebar) {
        titlebar.addEventListener("dblclick", (e) => {
          if (e.target instanceof HTMLButtonElement) {
            return;
          }

          windowElement.classList.toggle("collapsed");
          setWindowState("collapsed");
          window.getSelection().empty();
        });
      }
    }
    button.addEventListener("click", () => {
      const action = button.dataset.action;
      if (action === "collapse") {
        windowElement.classList.toggle("collapsed");
        setWindowState("collapsed");
      } else if (action === "zoom") {
        windowElement.classList.toggle("zoomed");
        setWindowState("zoomed");
      }
    });
  });
</script>
