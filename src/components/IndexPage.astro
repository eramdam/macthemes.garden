---
import type { Page } from "astro";
import { type CollectionEntry } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import OS9Window from "./OS9Window.astro";
import PaginationBar from "./PaginationBar.astro";
import { SingleTheme } from "./singleTheme";
import { getEntries } from "astro:content";
import { SortOptions, SortOrders } from "../helpers";
import { sortedIndexOf } from "lodash-es";

interface Props {
  page: Pick<
    Page<CollectionEntry<"themes">>,
    "url" | "lastPage" | "currentPage" | "data"
  >;
  sort: SortOptions;
  order: SortOrders;
}

const { page } = Astro.props;
const currentSort = Astro.props.sort;
const currentOrder = Astro.props.order;
const hasExplicitSort = Astro.url.searchParams.has("sort");
const makeNewUrl = (sort: SortOptions, order: SortOrders) => {
  const url = new URL(Astro.url);
  url.searchParams.set("sort", sort);
  url.searchParams.set("order", order.toString());
  return url.toString();
};

const sortOptionsLabels: Record<SortOptions, string> = {
  [SortOptions.AUTHOR]: "Author",
  [SortOptions.CREATED]: "Update date",
  [SortOptions.NAME]: "Name",
  [SortOptions.YEAR]: "Year",
};

const sortMenuItems = [
  { type: SortOptions.CREATED, order: SortOrders.DESC },
  { type: SortOptions.NAME, order: SortOrders.ASC },
  { type: SortOptions.AUTHOR, order: SortOrders.ASC },
  // { type: SortOptions.YEAR, order: SortOrders.ASC },
];
---

<style>
  .themes-sorting {
    text-align: center;
    padding: 10px 0;
    margin: 0 10px;
    border-bottom: 1px solid var(--grays-500);
  }
</style>
<BaseLayout title={undefined}>
  <OS9Window asElement="main" title="Index">
    <PaginationBar slot="before-content" pagination={page} />
    <div class="themes-sorting">
      Sort by:
      {
        sortMenuItems.map((item, index) => {
          const downArrow = <>&DownArrow;</>;
          const upArrow = <>&UpArrow;</>;
          const isCurrentSort = currentSort === item.type;
          const currentArrow =
            (hasExplicitSort &&
              isCurrentSort &&
              (currentOrder === SortOrders.ASC ? upArrow : downArrow)) ||
            null;

          return (
            <>
              <a
                href={makeNewUrl(
                  item.type,
                  currentSort === item.type && currentOrder === SortOrders.ASC
                    ? SortOrders.DESC
                    : SortOrders.ASC
                )}
              >
                {sortOptionsLabels[item.type]}
                {currentArrow && <>&nbsp;{currentArrow}</>}
              </a>
              {index < sortMenuItems.length - 1 && " | "}
            </>
          );
        })
      }
    </div>
    <div class="themes-grid">
      {
        page.data
          .map((t) => t.data)
          .map(async (theme) => {
            const authors = (await getEntries(theme.authors)).map(
              (a) => a.data
            );
            return <SingleTheme theme={theme} authors={authors} />;
          })
      }
    </div>
    <PaginationBar slot="after-content" pagination={page} />
  </OS9Window>
</BaseLayout>
