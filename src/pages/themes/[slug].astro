---
import { getCollection, getEntries } from "astro:content";

import {
  AuthorsFormatter,
  formatAuthorsText,
} from "../../components/authorsFormatter";
import OS9Window from "../../components/OS9Window.astro";
import ServerLikeButton from "../../components/ServerLikeButton.astro";
import { archiveFileSize, archiveMd5 } from "../../helpers";
import { getLikeCountsByThemeIds } from "../../helpers/dbHelpers";
import BaseLayout from "../../layouts/BaseLayout.astro";

const themes = await getCollection("themes");
const themeMatch = themes.find((t) => t.data.urlBase === Astro.params.slug);

if (!themeMatch) {
  return Astro.redirect("/404");
}

Astro.response.headers.set(
  "CDN-Cache-Control",
  "public, max-age=10, must-revalidate"
);

const likesCountByID = await getLikeCountsByThemeIds();
const theme = themeMatch.data;
const themeId = themeMatch.id;
const likesCount = likesCountByID[themeId] || 0;
const isDev =
  import.meta.env.DEV && import.meta.env.PUBLIC_SHOW_DEBUG === "true";
const relatedThemes = await getEntries(theme.relatedThemes);
const hasMoreThemesInArchive = relatedThemes.length > 0;
const authors = (await getEntries(theme.authors)).map((a) => a.data);
const authorsString =
  authors.length > 0
    ? formatAuthorsText(authors.map((a) => a.name))
    : undefined;
const openGraphDescription = [
  theme.name,
  authorsString && `by ${authorsString}`,
  theme.year && `(${theme.year})`,
]
  .filter(Boolean)
  .join(" ");

const fileHosts = [
  "files.macthemes.garden",
  "themes.lizard.tools",
  "macthemes.drac.at",
  "macthemes.jkap.io",
];
---

<style>
  .related-themes {
    display: flex;
    flex-direction: column;
    padding: 10px 0;
    padding-top: 20px;
    gap: 20px;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    align-items: center;
    justify-content: center;
  }

  .related-single-theme {
    display: flex;
    flex-direction: column;
    gap: 10px;
    text-align: left;
  }

  .related-single-theme > span {
    font-size: 0.8rem;
    display: flex;
    flex-direction: column;
  }
</style>

<BaseLayout
  title={theme.name}
  description={openGraphDescription}
  images={[`/themes-opengraph/${theme.urlBase}.png`]}
>
  <OS9Window asElement="main" title={theme.name}>
    <section class="single-theme-page">
      <h1 class="single-theme-title">{theme.name}</h1>
      <div class="single-theme-grid">
        <div class="gallery">
          {
            theme.thumbnails.map((image) => {
              return (
                <a
                  class="gallery-thumbnail"
                  href={image}
                  target="_blank"
                  rel="noopener"
                >
                  <img src={image} alt="" />
                </a>
              );
            })
          }
        </div>
        <div class="infos">
          <dl>
            <dl>
              <dt>Name:</dt>
              <dd>{theme.name}</dd>

              <dt>Author(s):</dt>
              <dd>
                <AuthorsFormatter asLinks authors={authors} />
              </dd>

              <dt>Release year:</dt>
              <dd>{theme.year}</dd>

              {
                isDev && (
                  <Fragment>
                    <dt>Is new to Airtable:</dt>
                    <dd>{theme.isNew ? "Yes" : "No"}</dd>
                  </Fragment>
                )
              }

              <dt>Social:</dt>
              <dd>
                <ServerLikeButton server:defer themeId={themeId}>
                  Like
                </ServerLikeButton>

                <br />
                {isDev ? `\nlikes: ${likesCount}` : null}
              </dd>

              <dt>Archive file:</dt>
              <dd>
                {theme.archiveFile}{" "}
                {archiveFileSize(theme.archiveFile)}
              </dd>
              <dd>
                MD5
                <a
                  href={`https://files.macthemes.garden/${theme.archiveFile}.md5`}
                >
                  {archiveMd5(theme.archiveFile)}</a
                >
              </dd>
              <dt>Download links:</dt>
              <dd>
                <ul>
                  {
                    fileHosts.map((fileHost, index) => {
                      return (
                        <li>
                          <a href={`https://${fileHost}/${theme.archiveFile}`}>
                            #{index + 1} ({fileHost})
                          </a>
                        </li>
                      );
                    })
                  }
                </ul>
              </dd>
              {
                hasMoreThemesInArchive && (
                  <Fragment>
                    <dt>More from the same archive file:</dt>
                    <dd class="related-themes">
                      {relatedThemes.map((t) => {
                        return (
                          <a
                            class="related-single-theme"
                            href={`/themes/${t.data.urlBase}`}
                          >
                            <img
                              src={t.data.mainThumbnail}
                              loading="lazy"
                              decoding="async"
                              alt={`${t.data.name} by ${t.data.authors.join(", ")}`}
                            />
                            <span>{t.data.name}</span>
                          </a>
                        );
                      })}
                    </dd>
                  </Fragment>
                )
              }
            </dl>
          </dl>
        </div>
      </div>
    </section>
  </OS9Window>
</BaseLayout>
