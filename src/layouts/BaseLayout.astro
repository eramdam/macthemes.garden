---
import OS9Window, { WindowButtons } from "../components/OS9Window.astro";
import { getCollectionStats } from "../content.config";
import { TZDate } from "@date-fns/tz";
import "../styles/index.css";

interface Props {
  title: string | undefined;
}
const { title } = Astro.props;
const { themes, authors } = await getCollectionStats();
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
      {title ? `Mac Themes Garden | ${title}` : `Mac Themes Gardens`}
    </title>
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Mac Themes Garden Feed"
      href={new URL("feed.xml", Astro.site)}
    />
  </head>

  <body>
    <OS9Window
      asElement="header"
      title="Welcome!"
      classname="header-box"
      buttons={[WindowButtons.Close, WindowButtons.Collapse]}
    >
      <div class="header-image-box">
        <div class="header-image">
          <img src="/assets/macthemes-garden-header.png" alt="" />
        </div>
      </div>

      <nav>
        <ul class="macos9-menu">
          <li>
            <a href="/" class="macos9-menu-icon">
              <img src="/assets/menu/schemes-puzzle.png" alt="" />
              <span> Schemes </span>
            </a>
          </li>
          <li>
            <a href="/authors" class="macos9-menu-icon">
              <img src="/assets/menu/file-sharing.png" alt="" />
              <span> Authors </span>
            </a>
          </li>
          <span class="spacer"></span>
          <li>
            <a href="/feed" class="macos9-menu-icon">
              <img src="/assets/menu/feed.png" alt="" />
              <span> Feed </span>
            </a>
          </li>
          <li>
            <a href="/search" class="macos9-menu-icon">
              <img src="/assets/menu/search.png" alt="" />
              <span> Search </span>
            </a>
          </li>
          <li>
            <a href="/about" class="macos9-menu-icon">
              <img src="/assets/menu/finder-computer.png" alt="" />
              <span> About </span>
            </a>
          </li>
        </ul>
      </nav>
    </OS9Window>
    <slot />
    <OS9Window asElement="footer" title="Footer" classname="footer">
      <p>
        All the themes showcased are the property of their respective authors.
        Not affiliated with Apple Inc.
      </p>
      <p>
        As of {
          new TZDate(Date.now(), "America/Los_Angeles").toLocaleDateString(
            "en",
            {
              dateStyle: "medium",
            }
          )
        }, there are <a href="/">{themes.toLocaleString()} themes</a> from <a
          href="/authors">{authors.toLocaleString()} authors</a
        >
      </p>
    </OS9Window>
    <script>
      document.querySelectorAll(".macos9-window").forEach((windowElement) => {
        const id = windowElement.getAttribute("id");
        const storageKey = `macthemes-window-${id}`;
        const windowState = JSON.parse(
          localStorage.getItem(storageKey) ||
            `{"collapsed": false,"zoomed": false}`
        );
        if (windowState.collapsed) {
          windowElement.classList.add("collapsed");
        } else if (windowState.zoomed) {
          windowElement.classList.add("zoomed");
        }

        function setWindowState(state: any) {
          const currentState = JSON.parse(
            localStorage.getItem(storageKey) ||
              `{"collapsed": false,"zoomed": false}`
          );

          currentState.collapsed =
            state === "collapsed"
              ? !currentState.collapsed
              : currentState.collapsed;
          currentState.zoomed =
            state === "zoomed" ? !currentState.zoomed : currentState.zoomed;

          localStorage.setItem(storageKey, JSON.stringify(currentState));
        }

        windowElement.querySelectorAll("button").forEach((button) => {
          if (button.dataset.action === "collapse") {
            const titlebar = windowElement.querySelector(
              ".macos9-window-titlebar"
            );
            if (titlebar) {
              titlebar.addEventListener("dblclick", (e) => {
                if (e.target instanceof HTMLButtonElement) {
                  return;
                }

                windowElement.classList.toggle("collapsed");
                setWindowState("collapsed");
                window.getSelection()?.empty();
              });
            }
          }
          button.addEventListener("click", () => {
            const action = button.dataset.action;
            if (action === "collapse") {
              windowElement.classList.toggle("collapsed");
              setWindowState("collapsed");
            } else if (action === "zoom") {
              windowElement.classList.toggle("zoomed");
              setWindowState("zoomed");
            }
          });
        });
      });
    </script>
  </body>
</html>
